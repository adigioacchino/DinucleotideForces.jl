var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DinucleotideForces","category":"page"},{"location":"#DinucleotideForces","page":"Home","title":"DinucleotideForces","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for DinucleotideForces, a Julia package to computed dinucleotide forces in nucleic-acid sequences.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is not registered. Install with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(url=\"https://github.com/adigioacchino/DinucleotideForces.jl\")","category":"page"},{"location":"#Dinucleotide-forces:-definition","page":"Home","title":"Dinucleotide forces: definition","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Nucleotide/dinucleotide forces for a sequence are parameters that capture pressures to increase or decrease the usage of a given nucleotide/dinucleotide in the sequence. So a positive force on a nucleotide corresponds to a pressure to have more occurrences of the given dinucleotide, while a negative pressure corresponds to a lack of occurrences of the dinucleotide in the considered sequence. Forces are inferred through a maximum entropy model. For a more formal definition give a look at this paper.","category":"page"},{"location":"#How-to-cite-this-package","page":"Home","title":"How to cite this package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If this package is used for research purposes, please consider citing this  and this papers.","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#Basic-usage","page":"Home","title":"Basic usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We will take sub-sequence from the Influenza H5N1 PB2 segment (strain used: A/Anhui/1/2005) and we will use it as working example to test the function of the scripts. We start by loading the script and the sequence:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DinucleotideForces\nexample_seq = \"ATGGAGAGAATAAAAGAATTAAGGGATCTAATGTCACAGTCCCGCACTCGCGAGATACTAACAAAAACCACTGTGGACCATATGGCCATAATCAAGAAGTACACATCAGGAAGACAAGAGAAGAACCCTGCTCTCAGAATGAAATGGATGATGGCAATGAAATATCCAATCACAGCGGACAAGAGAATAACAGAGATGATTCCTGAAAGGAATGAACAAGGGCAGACGCTCTGGAGCAAGACAAATGATGCCGGATCGGACAGGTTGATGGTGTCTCCCTTAGCTGTAACTTGGTGGAATAGGAATGGGCCGACGACAAGTGCAGTCCATTATCCAAAGGTTTACAAAACATACTTTGAGAAGGCT\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DinucleotideForces\nexample_seq = \"ATGGAGAGAATAAAAGAATTAAGGGATCTAATGTCACAGTCCCGCACTCGCGAGATACTAACAAAAACCACTGTGGACCATATGGCCATAATCAAGAAGTACACATCAGGAAGACAAGAGAAGAACCCTGCTCTCAGAATGAAATGGATGATGGCAATGAAATATCCAATCACAGCGGACAAGAGAATAACAGAGATGATTCCTGAAAGGAATGAACAAGGGCAGACGCTCTGGAGCAAGACAAATGATGCCGGATCGGACAGGTTGATGGTGTCTCCCTTAGCTGTAACTTGGTGGAATAGGAATGGGCCGACGACAAGTGCAGTCCATTATCCAAAGGTTTACAAAACATACTTTGAGAAGGCT\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Let's start by computing the force on the CpG motif along the full genome: this can be done with the only exported function of the package, DimerForce, as shown in the following code block.","category":"page"},{"location":"","page":"Home","title":"Home","text":"motifs = [\"CG\"];\nDimerForce(example_seq, motifs)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The resulting output will be a dictionary where the force is associated to each motif specified (in this case only the \"CG\" motif).","category":"page"},{"location":"","page":"Home","title":"Home","text":"When no nucleotide biases (frequencies) are specified, as above, the corresponding forces are inferred together with the forces.  We will use the word fields to indicate forces on nucleotides, while forces will be from now on restricted to dinucleotides. Notice that sum_n e^h_n = 1, where n in ACGT. This is the result of a gauge choice, because in general the model probabilities are invariant under the transformation $ hn \\to hn+K$, which can then be used to make the fields interpretable as the logarithm of a frequency (more on this is discussed later in section Focus on gauge choices).","category":"page"},{"location":"","page":"Home","title":"Home","text":"A user-specified bias can be given, and in this case fields are not inferred:","category":"page"},{"location":"","page":"Home","title":"Home","text":"nt_bias = [0.25, 0.25, 0.25, 0.25]; # probs for A, C, G, T\nmotifs = [\"CG\"];\nDimerForce(example_seq, motifs; freqs=nt_bias)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package easily allows to compute forces on two or more dinucleotides:","category":"page"},{"location":"","page":"Home","title":"Home","text":"motifs = [\"CG\", \"TA\"];\nDimerForce(example_seq, motifs)","category":"page"},{"location":"","page":"Home","title":"Home","text":"nts = [\"A\", \"C\", \"G\", \"T\"];\nmotifs = [a*b for a in nts for b in nts];\nDimerForce(example_seq, motifs)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Look at how the CpG force changed in the cases: this is due to the fact that different motifs interact. ","category":"page"},{"location":"#Focus-on-gauge-choices","page":"Home","title":"Focus on gauge choices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When the full set of fields and forces is inferred, the system of equations solved to obtain these parameters is underdetermined. This means that a gauge choice must be made, for instance by setting some forces to zero by passing less than 16 dinucleotides as motifs. If such a choise is not made, the package selects the gauge so that:","category":"page"},{"location":"","page":"Home","title":"Home","text":"the exponential of the fields sum to 1;\nthe forces for dinucleotides of the form NN and those of the form NT are put to zero.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Notice that the script allows for flexible choices: if not all the dinucleotides are given, the gauge is always chosen such that the maximum possible number of the nucleotides of the form NN and NT have forces equal to zero, as one can check by running the next code blocks.","category":"page"},{"location":"","page":"Home","title":"Home","text":"motifs = [\"AC\", \"AG\", \"AT\", \"CA\", \"GA\", \"TA\"];\nDimerForce(example_seq, motifs)","category":"page"},{"location":"","page":"Home","title":"Home","text":"motifs = [\n    \"AC\",\"AG\",\"AT\",\"CA\",\n    \"CG\",\"CT\",\"GA\",\"GC\",\n    \"GT\",\"TA\",\"TC\",\"TG\",\n    ];\nDimerForce(example_seq, motifs)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Notice that when dinucleotides are not given, this is equivalent to fix to 0 their forces.  Depending on which dinucleotides are not given, this might or not be a specific gauge - in other words, it might or not result in an equivalent model. For instance, the following three cells result in equivalent models (although the third has different parameters because it is in another gauge), while the fourth does not:","category":"page"},{"location":"","page":"Home","title":"Home","text":"motifs = [\"AC\", \"AG\", \"AT\", \"CA\", \"GA\", \"TA\"];\nDimerForce(example_seq, motifs)","category":"page"},{"location":"","page":"Home","title":"Home","text":"motifs = [\"AC\", \"AG\", \"CA\", \"GA\", \"TA\"];\nDimerForce(example_seq, motifs)","category":"page"},{"location":"","page":"Home","title":"Home","text":"motifs = [\"AG\", \"AT\", \"CA\", \"GA\", \"TA\"];\nDimerForce(example_seq, motifs)","category":"page"},{"location":"","page":"Home","title":"Home","text":"motifs = [\"AG\", \"CA\", \"GA\", \"TA\"];\nDimerForce(example_seq, motifs)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In some cases (notably when all the dinucleotides are given), fixing fields is equivalent to fix (part of) a gauge, so the model is independendent on this choice (although the values of the inferred parameters depend on that).","category":"page"},{"location":"#Inferring-forces-from-multiple-sequences","page":"Home","title":"Inferring forces from multiple sequences","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is able to infer fields and forces from a set of sequences:","category":"page"},{"location":"","page":"Home","title":"Home","text":"motifs = [\"CG\"];\nseqs = [example_seq, example_seq];\nDimerForce(seqs, motifs)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The sequences do not need to have the same length. However, the values of the inferred parameters weakly depend on the sequence length, that has to be provided","category":"page"},{"location":"","page":"Home","title":"Home","text":"motifs = [\"CG\"];\nseqs = [example_seq, example_seq[1:100]];\nDimerForce(seqs, motifs, 2500)","category":"page"},{"location":"","page":"Home","title":"Home","text":"or it will arbitarily set by the package to the standard value of 5000","category":"page"},{"location":"","page":"Home","title":"Home","text":"motifs = [\"CG\"];\nseqs = [example_seq, example_seq[1:100]];\nDimerForce(seqs, motifs)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Notice, in the last two examples, how the changes due to the different lengths used during the inference of the parameters only marginally affect their values.","category":"page"},{"location":"#Computing-energies-and-loglikelihoods","page":"Home","title":"Computing energies and loglikelihoods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Given a sequence, the package allows to compute easily its energy assigned by a model","category":"page"},{"location":"","page":"Home","title":"Home","text":"model = DimerForce(example_seq, [\"CG\"]);\nDinucleotideForces.ComputeEnergy(example_seq, model)","category":"page"},{"location":"","page":"Home","title":"Home","text":"and its log-likelihood","category":"page"},{"location":"","page":"Home","title":"Home","text":"model = DimerForce(example_seq, [\"CG\"]) # hide\nDinucleotideForces.ComputeLoglikelihood(example_seq, model)","category":"page"},{"location":"","page":"Home","title":"Home","text":"To make sense of this large negative log-likelihood, consider that in the uniform case we have 4^L sequences, so the log-likelihood of each of them would be:","category":"page"},{"location":"","page":"Home","title":"Home","text":"- length(example_seq) * log(4)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Notice that the function ComputeLoglikelihood computes the partition function each time it is runned. This can slow down the computation when the function is called many times with the same model and to prevent this the log of the partition function can be passed directly:","category":"page"},{"location":"","page":"Home","title":"Home","text":"model = DimerForce(example_seq, [\"CG\", \"AC\"]);\nks = keys(model);\nk1 = [k for k in ks if length(k)==1];\nk2 = [k for k in ks if length(k)==2];\nfields = [model[k] for k in k1];\nforces = [model[k] for k in k2];\nlogZ = DinucleotideForces.eval_log_Z(fields, forces, k2, length(example_seq));\nDinucleotideForces.ComputeLoglikelihood(example_seq, model; logZ=logZ)","category":"page"},{"location":"#Sampling-sequences","page":"Home","title":"Sampling sequences","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The framework used by this package introduced a probability distribution over the sequences given a set of fields and/or forces. Sequences can be sampled from this distribution exactly (that is, without using any Markov-chain based algorithm such as Metropolis) using the simple topology of the graph of interactions between nucleotides (a tree) and the fact that the partition function can be computed exactly. The funcion SampleSequence of the package implements this idea, and it is very easy to use, its only arguments being the model that has to be used to sample from and the length of the desired sequence:","category":"page"},{"location":"","page":"Home","title":"Home","text":"nts = [\"A\", \"C\", \"G\", \"T\"];\nmotifs = [a*b for a in nts for b in nts];\nmodel = DimerForce(example_seq, motifs);\nDinucleotideForces.SampleSequence(model, 1000)","category":"page"},{"location":"#Known-issues","page":"Home","title":"Known issues","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are issues with the add_pseudocount argument of DimerForce.  In principle, using add_pseudocount=true should add a single pseudocount to the number of each motif inferred (nucleotide or di-nucleotide). However, from the output of the following two examples it looks that something is not working properly","category":"page"},{"location":"","page":"Home","title":"Home","text":"nts = [\"A\", \"C\", \"G\", \"T\"];\nmotifs = [a*b for a in nts for b in nts];\nDimerForce(example_seq, motifs)\nDimerForce(example_seq, motifs, add_pseudocount=true)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is even worse if a shorter sequence is used","category":"page"},{"location":"","page":"Home","title":"Home","text":"nts = [\"A\", \"C\", \"G\", \"T\"]; # hide\nmotifs = [a*b for a in nts for b in nts]; # hide\nex2 = example_seq[1:100]\nDimerForce(ex2, motifs)\nDimerForce(ex2, motifs, add_pseudocount=true)","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DinucleotideForces]","category":"page"},{"location":"#DinucleotideForces.ComputeEnergy-Tuple{AbstractString, Dict{String, Float64}}","page":"Home","title":"DinucleotideForces.ComputeEnergy","text":"ComputeEnergy(seq::AbstractString, fields_forces::Dict{String, Float64})\n\nGiven a sequence seq, the single-nucleotide fields and the dinucleotide forces (as a single dict),  compute the energy of this sequence.\n\n\n\n\n\n","category":"method"},{"location":"#DinucleotideForces.ComputeLoglikelihood-Tuple{AbstractString, Dict{String, Float64}}","page":"Home","title":"DinucleotideForces.ComputeLoglikelihood","text":"ComputeLoglikelihood(seq::AbstractString, fields_forces::Dict{String, Float64}; logZ=missing)\n\nGiven a sequence seq, the single-nucleotide fields and the dinucleotide forces (as a single dict), compute the log-likelihood (energy minus log of Z) of this sequence. logZ can be passed directly if pre-computed, otherwise is it computed each time this function is called.\n\n\n\n\n\n","category":"method"},{"location":"#DinucleotideForces.ComputeNumObservations-Tuple{Vector{<:AbstractString}, Union{Vector{<:AbstractString}, Vector{<:AbstractChar}}, Int64}","page":"Home","title":"DinucleotideForces.ComputeNumObservations","text":"ComputeNumObservations(seqs::Vector{<:AbstractString}, independent_motifs::Vector{<:AbstractString}, L::Int)\n\nFor each motif in independent_motifs, compute the number of observed motifs in each sequence in seqs, then divide by the sequence length, take the average of these intensive fractions over the sequences, and multiply by the model length L.\n\n\n\n\n\n","category":"method"},{"location":"#DinucleotideForces.DimerForce","page":"Home","title":"DinucleotideForces.DimerForce","text":"DimerForce(seq::Union{AbstractString,Vector{<:AbstractString}}, motifs::Vector{<:AbstractString}; L::Union{Int,Missing}=missing, \n                freqs::Union{Vector{Float64},Missing}=missing, tolerance::Float64=0.01, max_iter::Int=100, \n                add_pseudocount=false)\n\nIf frequencies are given, return the forces on the motifs 'motifs' computed for sequence 'seq' with  the frequency bias given. If frequencies are not given, the local fields (NOT frequencies!) are inferred and returned (in a gauge such that the exp of them sum to 1, so the fields can be interpreted as log of frequencies). Notice that seq is used only to compute the number of observed motifs (and nucleotides if the frequencies are not provided by user).  Also notice that if motifs are dinucleotides, only up to 12 of them are  independent.  Finally, tolerance and maxiter are parameters for the Newton-Raphson algorithm  used to solve the system of equations. If addpseudocount, a single pseudocount is added for each observed number of nucleotides and dinucleotides. seq can be a single sequence or a vector of sequences. L can be used to define the length of the modeled sequence. If not given, the length of the sequence will be used if a single  sequence or a set of sequences of the same lengths are provided. Otherwise, the default value of 5000 will be used.\n\n\n\n\n\n","category":"function"},{"location":"#DinucleotideForces.DimerForceOnlyForces","page":"Home","title":"DinucleotideForces.DimerForceOnlyForces","text":"DimerForceOnlyForces(seqs::Vector{<:AbstractString}, motifs::Vector{<:AbstractString}, fields::Vector{Float64},\n                            Lmodel::Union{Int,Missing}=missing; tolerance::Float64=0.01, max_iter::Int=100, add_pseudocount=true)\n\n\n\n\n\n","category":"function"},{"location":"#DinucleotideForces.DimerForceWithFields","page":"Home","title":"DinucleotideForces.DimerForceWithFields","text":"DimerForceWithFields(seqs::Vector{<:AbstractString}, nucleotides::Vector{Char}, motifs::Vector{<:AbstractString}, \n                 Lmodel::Union{Int,Missing}=missing; tolerance::Float64=0.01, max_iter::Int=100, add_pseudocount=true)\n\n\n\n\n\n","category":"function"},{"location":"#DinucleotideForces.EvaluateLogZ-NTuple{4, Any}","page":"Home","title":"DinucleotideForces.EvaluateLogZ","text":"Compute the transfer matrix through GenerateMotifMatrix, generate_freqsM and the forces given, then takes the correct power to obtian Z.\n\n\n\n\n\n","category":"method"},{"location":"#DinucleotideForces.FixFinalGauge!-Tuple{Dict{String, Float64}}","page":"Home","title":"DinucleotideForces.FixFinalGauge!","text":"Returns a new dictionary with all the fields/couplings inferred, such that the exp of the fields sum to 1 and as much information as possible is included in the field, by putting other motifs to 0 (if possible, those of the form AA, CC, GG, TT and those ending  with T).\n\n\n\n\n\n","category":"method"},{"location":"#DinucleotideForces.GaugeAwayVariables-Tuple{Vector{<:AbstractString}, Bool}","page":"Home","title":"DinucleotideForces.GaugeAwayVariables","text":"This function returns the nucleotides or motifs that have to be inferred after as many variables as possible are fixed to 0 through gauge transformations.\n\n\n\n\n\n","category":"method"},{"location":"#DinucleotideForces.GenerateMotifMatrix-Tuple{Vector{<:AbstractString}}","page":"Home","title":"DinucleotideForces.GenerateMotifMatrix","text":"Return the matrices used for the computation of the partition function for each motif in motifs. In particular, M_{ij} is the number of times  the given motif appears in n(i) + n(j), with n(i) the i-th nucleotide.\n\n\n\n\n\n","category":"method"},{"location":"#DinucleotideForces.GenerateNucleotideMatrix-Tuple{Vector{Float64}, Bool}","page":"Home","title":"DinucleotideForces.GenerateNucleotideMatrix","text":"Return a matrix with the informations about the nt frequences, so that when it is multiplied elementwise with that obtained through  GenerateMotifMatrix (after implementing the exponentiation with the force, see EvaluateLogZ), the transfer matrices used to compute Z are finally obtained.\n\n\n\n\n\n","category":"method"},{"location":"#DinucleotideForces.Marginal1GivenPrevious-Tuple{Dict{String, Float64}, AbstractString}","page":"Home","title":"DinucleotideForces.Marginal1GivenPrevious","text":"Marginal1GivenPrevious(Marginal2Points::Dict{String, Float64}, fixed::AbstractString; first::Bool=true)\n\nGiven the 2point marginal, fix the first symbol (if first=true, otherwise  fix the second) to obtain the probability of the second given that the first is equal to fixed (or viceversa if first=false).\n\n\n\n\n\n","category":"method"},{"location":"#DinucleotideForces.Marginal1Point-Tuple{Dict{String, Float64}}","page":"Home","title":"DinucleotideForces.Marginal1Point","text":"Marginal1Point(Marginal2Points::Dict{String, Float64}; first::Bool=true)\n\nGiven the 2point marginal, sum over the second symbol (if first=true, otherwise  over the first) to obtain the 1-point marginal.\n\n\n\n\n\n","category":"method"},{"location":"#DinucleotideForces.Marginal2Points-Tuple{Dict{String, Float64}, Int64, Int64}","page":"Home","title":"DinucleotideForces.Marginal2Points","text":"Marginal2Points(fields_forces::Dict{String, Float64}, L::Int, pos::Int)\n\nGiven a model specified by fields and forces and sequence length, compute the 2-point marginal in position (i-1, i). The result is returned as a dictionary \"s(i-1) si\" => probability.\n\n\n\n\n\n","category":"method"},{"location":"#DinucleotideForces.PreprocessSequences-Tuple{Vector{<:AbstractString}}","page":"Home","title":"DinucleotideForces.PreprocessSequences","text":"PreprocessSequences(seqs_in::Vector{<:AbstractString})\n\nPre-process the vector of sequences seqs_in, so that sequences only contains letters A, C, G, T. The pre-processed sequence vector is the returned.\n\n\n\n\n\n","category":"method"},{"location":"#DinucleotideForces.SampleSequence","page":"Home","title":"DinucleotideForces.SampleSequence","text":"SampleSequence(fields_forces::Dict{String, Float64}, L::Int, \n                    rng::AbstractRNG=Xoshiro(123))\n\nSample a sequence of length L from the model specified by the parameters in fields_forces. The sampling is exact (that is  the correct probability distribution is sampled) and a random  generator can be specified via rng. \n\n\n\n\n\n","category":"function"}]
}
